<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<head>
<meta charset="utf-8"/>
<title>Computers in Chemistry</title>
<link rel="stylesheet" href="../styles/stylesheet.css" type="text/css"/>
</head>
<body>
<section epub:type="chapter" id="ch04">
<a id="page_43" class="page" style="width:70%;">Page 43, Programming the hardware</a>
<h1 class="main"><b>4<span class="space">&#160;</span>Programming the hardware</b></h1>
<p class="banoindent">The interface hardware described in the previous chapter is, of course, useless without some form of program to control it and present the data. This chapter will describe some of the techniques used in fulfilling that r&#x00F4;le.</p>
<p class="baindent">Once again though, it must be stressed that the examples and techniques presented here are not meant to be a definitive treatise on programming, rather they are a reflection of the author&#x2019;s own knowledge and the hardware and software available to him.</p>
<section epub:type="chapter" id="ch4.1">
<h2 class="h2"><b>4.1 The basics</b></h2>
<p class="banoindent">We saw in <a href="Chapter03.xhtml">Chapter 3</a> how the registers of an interface device occupy specific locations in the memory map of a microprocessor. In order to access or modify the data held in those registers it is necessary to simply read from or write to those memory locations. However, the consequences of those reads or writes is dependent entirely on the specific device in question. For instance, the action of reading data from an ADC might start the next conversion, whilst a different type of ADC may require a bit in a register to be toggled to initiate the conversion sequence. The key is to thoroughly read, and understand, the data sheets and programming instructions of any device used.</p>
<p class="baindent">The choice of programming language used depends on many factors: an idealistic solution would be to weigh up the pros and cons and choose a language most suitable to the job in hand. More often than not though, the choice is proscribed by the languages available on the computer you are using, and, as an over-riding factor, the abilities of the programmer. Nevertheless, if there is still scope for choice, there are two rough guidelines:</p>
<p class="list2">&#x2022;<span class="padding"></span>interaction at the chip level is best done using machine level instructions;</p>
<p class="list2">&#x2022;<span class="padding"></span>peripherals such as mass storage or display devices are best addressed using high-level languages.</p>
<p class="baindent">Needless to say, these are rules that are just crying out loud to be broken&#x0021; Many high-level languages have extensions specifically designed to make interaction at the chip level easy; similarly, there are well documented methods of performing high-level I/O functions from machine code programs. Using the &#x2018;ideal&#x2019; situation of a mixture of high- and low-level languages can also be a problem, not least of which is reliably passing information from one part of the program to the other.</p>
<p class="baindent">A further factor that the programmer should be aware of is how other programs or hardware in the computer may affect the running of their code. The main thing to be wary of is a multitasking environment. In rudimentary multitasking systems, such as Microsoft Windows, it is necessary that programs are &#x2018;well behaved&#x2019; and regularly relinquish control of the machine to other programs. Not only do you have to be careful to co-operate and <a id="page_44" class="page">Page 44, Programming the hardware</a>allow other programs some time, but you also have to be aware that other programs will <i>not</i> be as well behaved as you want. Specifically, it is very unwise in such a situation to rely on the fact that you will be able to perform a certain action within a particular time. If at all possible, especially for novice programmers, it is much easier to program in a non-multitasking environment such as DOS.</p>
<p class="baindent">The next few sections are devoted to a brief survey of the abilities of various high-level languages with regard to interfacing, whilst the following section will introduce machine level programming. The primary platform used will once again be the IBM PC, but the techniques are equally applicable to other platforms.</p>
</section>
<section epub:type="chapter" id="ch4.2">
<h2 class="h2"><b>4.2 BASIC</b></h2>
<p class="banoindent">One of the easiest languages to program in is BASIC. This, coupled to the fact that there are many excellent implementations of the language available for many different computers, makes it one of the most popular languages. Many versions have specific instructions for accessing memory (both conventional and I/O) directly.</p>
<p class="baindent">The standard BASIC commands for accessing memory directly are PEEK and POKE. PEEK is a function that takes as its argument an address, and returns the contents of the memory at that location; POKE takes two arguments, the first being an address, and the second a value to store at that address. In the PC, the analogous functions INP and OUT perform the same functions on the I/O address space.</p>
<aside class="abc" style="margin-top:1.8em;" epub:type="sidebar">
<p class="noindent2" style="margin-left:1em;">In x86 chips, the real address of any data in memory is always formed by shifting the DS (data segment) register left 4 bits, then adding that value to the one specified in the machine code. <i>e.g.</i> if DS&#x003D;1E00H, then the instruction &#x2018;MOV AL, [200H]&#x2019; would not read the contents of location 200H, but instead it would use location 1E000H &#x002B; 200H (&#x003D;1E200H).</p>
</aside>
<p class="baindent">The range of valid values for the arguments to these functions is dependent to a large extent on the specific implementation of the language. In general though the value read from or written to memory is usually 8-bit (<i>i.e.</i> in the range 0&#x2013;255) although it can, occasionally, be 16-bit. The address range is much more variable. In the PC, the value is 16-bit (<i>i.e.</i>0&#x2013;65535), but for the main memory, this value does not cover all possible addresses. The reason lies in the way that memory addresses are formed and in the way that the x86 chip uses the DS register. Normally it is not necessary to worry about the value of this register, but in cases where there is a need to use a specific part of memory (if, for instance, an interface card makes data available in main memory as opposed to I/O memory), then the segment of memory accessed by the PEEK/POKE instructions can be set using the &#x2018;DEF SEG&#x2019; instruction.</p>
<p class="baindent">There are also instructions in most implementations of BASIC to execute code that isn&#x2019;t part of the main BASIC program, usually some variant of the &#x2018;CALL&#x2019; statement. It is important to read the manual carefully when it comes to the &#x2018;CALL&#x2019; command, especially if there are parameters to pass between the different pieces of code. Each language has its own idea about how to pass variables; for instance, are the parameters passed by value or by reference, what order are the variables passed, how are arrays or strings handled, and so on. When trying these sorts of things for the first time with any combination of languages, it is always best to experiment under controlled circumstances to ensure that each part of the program is receiving the data properly.</p>
<a id="page_45" class="page" style="width:70%;">Page 45, Programming the hardware</a>
<p class="baindent">A typical example of a short BASIC program to interact with an interface is shown in <a href="#fig4.1">Fig. 4.1</a>. This program uses the interface developed at the end of <a href="Chapter03.xhtml">Chapter 3</a> to output a sawtooth waveform on one of the DAC outputs. The waveform is generated simply by loading the DAC register with an incrementing value; the PIO is used solely to show what is happening <i>via</i> the front-panel lights.</p>
<figure class="image" id="fig4.1">
<img src="../images/45-1.jpg" alt="images"/>
<figcaption>
<aside class="abc1" style="margin-top:-15em;" epub:type="sidebar">
Fig. 4.1 A simple program that interacts with an interface on the I/O bus.</aside></figcaption>
</figure>
<p class="baindentt">The first OUT statement is just setting up the PIO, whilst the main body of the program is indicated clearly. Note the use of a variable to hold the addresses of the DAC and PIO &#x2013; this is not just to make the program more understandable (which it does), but also, during development work the address of the individual components may change: making the address a variable means that you only have to change the address in one place. Note also the use of a subroutine to actually alter the value of the DAC &#x2013; in this case it is not really necessary, but in a larger program, where you may be changing the value of the DAC in many places, it makes sense to only write the code once.</p>
</section>
<section epub:type="chapter" id="ch4.3">
<h2 class="h2">4.3 C</h2>
<p class="banoindent">The language C was originally developed in the Unix environment &#x2013; indeed the Unix operating system is largely written in C &#x2013; but it has become a popular language in other environments. Because of its roots in larger, multitasking, environments, there are no specific functions in C to interface with hardware devices directly. However, since the language was designed to be used for writing operating systems, it has well documented interfaces to machine code subroutines. Consequently, most hardware interfacing in C is done using small machine code subroutines. Some implementations of C even have an <i>in-line</i> assembler &#x2013; this means that the C compiler is able to <a id="page_46" class="page">Page 46, Programming the hardware</a>assemble small sections of assembly language code written directly into the C program, and incorporate the machine code produced directly into the executable. Having said this, some implementations of C for the PC do contain extensions that allow you to access the I/O address space. For instance, Borland&#x2019;s TurboC uses the &#x2018;inport&#x2019; and &#x2018;outport&#x2019; functions, but these functions are trivial to write in assembly language and so can easily be duplicated.</p>
</section>
<section epub:type="chapter" id="ch4.4">
<h2 class="h2"><b>4.4 Fortran</b></h2>
<p class="banoindent">Fortran is by no means a &#x2018;trendy&#x2019; language; in fact it dates from around 1956. Despite this, it is still the language of choice for many scientists. Again, there are no specific instructions for interfacing with hardware, but use can easily be made of external machine code subroutines. The main advantage of Fortran is that it is relatively easy to perform complex calculations, such as Fourier transforms, on the data obtained from an experiment. One problem with Fortran is that the passing of parameters between subroutines is not as simple as might be hoped, but careful study of the manual, and the example programs supplied with it, should make things clear.</p>
</section>
<section epub:type="chapter" id="ch4.5">
<h2 class="h2"><b>4.5 Assembly language</b></h2>
<p class="banoindent">The code that the CPU executes, the <i>machine code</i>, is stored as a series of binary numbers in memory. Each binary number has encoded in it both the operation for the CPU to undertake and the data, or a pointer to the data, on which to perform that operation. For instance, in the 8086 processor, the four bytes &#x2018;88C3&#x2019; means &#x2018;move the contents of register AL to register BL&#x2019;. Although the structure of the machine code instructions is logical, it is not memorable, and the encoding is designed solely to be easy for the CPU to interpret. In order to make things easy for mere humans to deal with assembly language is used. Assembly language is a set of mnemonics for the CPU operations; these mnemonics are translated, with an <i>assembler</i>, into machine code instructions. The assembly language instruction for the above machine code would be &#x2018;MOV BL, AL&#x2019;. Each type of CPU has its own set of assembly language instructions: assembly language written for an 8086 processor would not be compatible with that for a 6800 processor. As usual, the 8086 processor, <i>i.e.</i> the processor used in the IBM PC, will subsequently be used as an example.</p>
<p class="baindent">It is certainly not the intention to provide a detailed course on programming in assembly language here, there are plenty of excellent texts that can be used. However, an introduction to some basic principles is in order.</p>
<h3 class="h3"><b>Addressing modes</b></h3>
<p class="banoindent">It is a basic function of a CPU that it can perform functions on both its internal memory (or registers) and on external storage locations. In assembly language, operations on registers are specified by using the mnemonic for the register, e.g. &#x2018;MOV AX, 200H&#x2019; means move the value 200H into the register AX, whereas operations involving memory are specified using a variable name corresponding to a location, e.g. &#x2018;MOV AX, TOTAL&#x2019; means move the <a id="page_47" class="page">Page 47, Programming the hardware</a>value in memory location pointed to by &#x2018;TOTAL&#x2019; into the register AX. These different ways of accessing memory locations are called addressing modes: the two encountered so far are called <i>immediate</i> and <i>direct</i> addressing &#x2013; where only registers are involved, such as shown above, it is called <i>register</i> addressing. These modes are all that are needed for simple programs, but where more complex functions are necessary, more complex addressing modes are employed.</p>
<aside class="abc" style="margin-top:4em;" epub:type="sidebar">
<p class="noindent2" style="margin-left:1em;">These indexed addressing modes show the rudiments of array operations: the &#x2018;constant&#x2019;, or BX, may hold the start address of an array, with the SI register holding the index of the element within the array.</p>
</aside>
<p class="baindent"><i>Indirect</i> addressing is where the location of the address of the operator is given to the processor: in the 8086 series of processors only the BX, BP, SI or DI registers may hold that address, other processors can use a memory location. As an example take the instruction &#x2018;MOV AL, [BX]&#x2019;, this means move the value stored in the memory location whose address is held in the register BX into AL. A more complex form of indirect addressing is <i>indexed</i> addressing. Here the effective address of the operator is made up of the sum of a number of different parts: <i>e.g.</i> the BX register plus the SI (or Start Index) register plus a constant.</p>
<p class="baindent">These more complex addressing modes are useful when writing machine code subroutines for use with higher level languages. Often it is necessary to pass variables to and from the subroutines, and it is possible that these variables will be passed as an address that points to the variable, rather than the value of that variable &#x2013; this is especially true if arrays or strings are passed. Consequently, in order to access these passed variables, it is necessary to use some form of indirect or, in the case of arrays, indexed addressing.</p>
<h3 class="h3"><b>Stacks</b></h3>
<p class="banoindent">We have already met stacks in <a href="Chapter02.xhtml#ch2.1">Section 2.1</a>, but it is worthwhile revisiting them here in a programming context. As mentioned in that section, stacks are important in the operation of a processor, as they are the mechanism by which the state of the processor can be &#x2018;remembered&#x2019;. Whenever program flow is transferred to a subroutine using the &#x2018;CALL&#x2019; command, the processor puts the address of the next instruction to be executed after the &#x2018;CALL&#x2019; onto the stack. When the subroutine executes the &#x2018;RET&#x2019; statement to return to the calling code, the processor retrieves the address put onto the stack and continues execution. These two processes of placing and retrieving values from the stack are called <i>pushing</i> and <i>popping</i>.</p>
<p class="baindent">Subroutine calls are not the only use of the stack. There are two instructions called, unsurprisingly, &#x2018;PUSH&#x2019; and &#x2018;POP&#x2019;, that allow the programmer to push and pop registers to and from the stack. The stack is thus a convenient method of temporarily storing registers. The code segment in <a href="#fig4.2">Fig. 4.2</a> shows an example of how a register may be preserved using PUSH and POP. The &#x2018;IN&#x2019; instruction reads a data value from an I/O port into the AX (or AL) register, the address of that register can either be directly specified as a byte in the instruction (if the port number is less than 255), or as an address in the DX register. If it is necessary that the DX register be preserved, then it can be pushed onto the stack, and popped after the IN command.</p>
<aside class="abc" style="margin-top:-9em;" epub:type="sidebar">
<figure class="image" id="fig4.2" style="width:100%;">
<img src="../images/47-1.jpg" alt="images"/>
<figcaption style="margin-top:1em;">Fig. 4.2 Example of using PUSH and POP to preserve the value of a register.</figcaption>
</figure>
</aside>
<p class="baindent">Processors other than the 8086 series may have different stack commands, for instance there may be more than one stack, or commands to push combinations of registers onto the stack may exist. The &#x2018;CALL&#x2019; command (or its equivalent) may push more than just the program counter onto the stack, <a id="page_48" class="page">Page 48, Programming the hardware</a>or there may be different &#x2018;CALL&#x2019; commands that preserve different groups of registers. The important thing is to be familiar with the assembly language of the specific processor you are using.</p>
<aside class="abc" style="margin-top:1.8em;" epub:type="sidebar">
<figure style="margin-left:0.5em;" id="fig4.3">
<img src="../images/48-1.jpg" alt="images"/>
<figcaption>Fig. 4.3 The state of the stack after a subroutine call in MS Fortran. SP&#x2019; is the position of the stack pointer before the call, and SP is the position after.</figcaption>
</figure>
</aside>
<p class="baindent">One further important feature of stacks is that they are often the mechanism by which variables are passed between subroutines in high level languages. Take for example a subroutine in, say, MS Fortran, which is called with the code &#x2018;OUTDATA (P, A)&#x2019; where P is the port data, is to be written to, and A is the data which is to be written, both of which are declared as &#x2018;INTEGER * 2&#x2019;, or 16-bit integers. This subroutine, as its name suggests, writes the value of A to port P. When the subroutine is called, the value of &#x2018;P&#x2019; is first placed on the stack, followed by A, and then the code is called. The first thing the routine needs to do is retrieve these values without disturbing the stack (as it contains the location to return to needed by the RET statement). The easiest way to achieve this is to copy data directly from the stack; with the 8086 CPU, this is achieved with the BP register &#x2013; this register is similar to the BS register, but uses the SS segment rather than the DS segment as its base. The structure of the stack after the subroutine call is show in <a href="#fig4.3">Fig. 4.3</a>; it can clearly be seen that A is located at [SP&#x002B;2] and that P is at [SP&#x002B;4]. The subroutine is consequently relatively easy to construct and is shown below.</p>
<figure class="image" id="fig4.4">
<img src="../images/48-2.jpg" alt="images"/>
<figcaption class="fig1-s">Fig. 4.4 Example of subroutine to show how to retrieve data that has been placed on the stack by the calling program</figcaption>
</figure>
<p class="baindent">One thing to note is the &#x2018;RET&#x2019; statement. Normally, this statement just pops the top two bytes from the stack and uses this as a return address. However, when parameters have been passed on the stack they must be discarded after the routine has returned. This could be done by the calling code, but in the 8086 you can specify in the &#x2018;RET&#x2019; command how many extra bytes should be popped from the stack in order to tidy things up and keep the stack consistent.</p>
<p class="baindent">Finally, a word of warning concerning stacks. It is essential that any subroutine should leave the stack in an identical state to when it found it. Otherwise, if you have too many or too few &#x2018;PUSH&#x2019;S or &#x2018;POP&#x2019;S, then a &#x2018;RET&#x2019; command may use the wrong return address and mayhem is bound to ensue&#x0021;</p>
<h3 class="h3"><b>Flags and jumps</b></h3>
<p class="banoindent">The ability to &#x2018;make decisions&#x2019; is one of the basic features of a computer program. Although programs that follow the same, unvarying, sequence of instructions can be useful, they are not very versatile. The decision making in a program comes from the ability to test a condition and change the program flow depending on whether that condition is true or false. In machine code, the same is true, but the conditions able to be tested and the program &#x2018;constructs&#x2019; available are much more limited. Generally, the program flow in machine code is changed by jumping to a new location; that jump may be <a id="page_49" class="page">Page 49, Programming the hardware</a>unconditional, or it may depend on certain conditions. Those conditions are usually determined by the flags.</p>
<p class="baindent">As explained in <a href="Chapter02.xhtml#ch2.1">Section 2.1</a>, the flags are a series of one-bit storage locations grouped together into the flag register. The values of the flags are affected by the operations of the CPU. For instance, the zero (&#x2018;Z&#x2019;) flag is set to &#x2018;1&#x2019; whenever the result of certain operations is zero. In the 8086, there are nine flags (see <a href="#fig4.5">Fig. 4.5</a>), some of which are set by the results of instructions, others are set by the instruction itself and affect how the processor performs some operations.</p>
<figure class="image" id="fig4.5">
<img src="../images/49-1.jpg" alt="images"/>
<figcaption>
<aside class="abc1" style="margin-top:-7.5em;" epub:type="sidebar">
Fig. 4.5 The flag register in the 8086
</aside>
</figcaption>
</figure>
<p class="baindent">In general there are usually jump instructions to cover all the possible conditions of the flags, along with some instructions that act on combinations of flags. The 8086 has 18 conditional jumps (and an unconditional one), as shown in <a href="#tab4.1">Table 4.1</a>; other CPUs may have more, others may have fewer.</p>
<p class="tabcap" id="tab4.1">Table 4.1 The conditional jumps in the 8086</p>
<table class="width70tb" id="tab1.2" style="margin-top:0em;">
<tr>
<td class="borbwi30"><p class="table">Instruction</p></td>
<td class="borbwi30"><p class="table">Condition</p></td>
<td class="borbwi40"><p class="table">Interpretation (Jump if...)</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JE or JZ</p></td>
<td style="vertical-align:top;"><p class="table">ZF = 1</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;equal&#x201D; or &#x201C;zero&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JL or JNGE</p></td>
<td style="vertical-align:top;"><p class="table">(SF xor OF) = 1</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;less&#x201D; or &#x201C;not greater or equal&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JLE or JNG</p></td>
<td style="vertical-align:top;"><p class="table">((SF xor OF) or ZF) = 1</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;less or equal&#x201D; or &#x201C;not greater&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JB or JNAE or JC</p></td>
<td style="vertical-align:top;"><p class="table">CF = 1</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;below&#x201D; or &#x201C;not above or equal&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JBE or JNA</p></td>
<td style="vertical-align:top;"><p class="table">(CF or ZF) = 1</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;below or equal&#x201D; or &#x201C;not above&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JP or JPE</p></td>
<td style="vertical-align:top;"><p class="table">PF = 1</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;parity&#x201D; or &#x201C;parity even&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JO</p></td>
<td style="vertical-align:top;"><p class="table">OF = 1</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;overflow&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JS</p></td>
<td style="vertical-align:top;"><p class="table">SF = 1</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;sign&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JNE or JNZ</p></td>
<td style="vertical-align:top;"><p class="table">ZF = 0</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;not equal&#x201D; or &#x201C;not zero&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JNL or JGE</p></td>
<td style="vertical-align:top;"><p class="table">(SF xor OF) = 0</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;not less&#x201D; or &#x201C;greater or equal&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JNLE or JG</p></td>
<td style="vertical-align:top;"><p class="table">((SF xor OF) or ZF) = 0</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;not less or equal&#x201D; or &#x201C;greater&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JNB or JAE or JNC</p></td>
<td style="vertical-align:top;"><p class="table">CF = 0</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;not below&#x201D; or &#x201C;above or equal&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JNBE or JA</p></td>
<td style="vertical-align:top;"><p class="table">(CF or ZF) = 0</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;not below or equal&#x201D; or &#x201C;above&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JNP or JPO</p></td>
<td style="vertical-align:top;"><p class="table">PF = 0</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;not parity&#x2019; or &#x201C;parity odd&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JNO</p></td>
<td style="vertical-align:top;"><p class="table">OF = 0</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;not overflow&#x201D;</p></td>
</tr>
<tr>
<td style="vertical-align:top;"><p class="table">JNS</p></td>
<td style="vertical-align:top;"><p class="table">SF = 0</p></td>
<td style="vertical-align:top;"><p class="table">&#x201C;not sign&#x201D;</p></td>
</tr>
</table>
<p class="baindent">As an example of the use of flags and jumps, the machine code for reading the ADC in the example interface will be examined. The code is shown in <a href="#fig4.6">Fig. 4.6</a>. A conversion is initiated by writing to the ADC result register, and the top bit of that register remains set until the conversion is finished. It is thus necessary to wait until that bit is cleared before reading the result. The result itself is given in two consecutive locations, the high byte being in the first. As we can see, after the conversion is started, the ADC is read and an AND operation with 080H is performed on the result (the TEST instruction performs an AND, but does not change the contents of the register &#x2013; the flags are set according to the results of the operation though). This operation <a id="page_50" class="page">Page 50, Programming the hardware</a>effectively <i>masks</i> the single bit we are interested in &#x2013; the result of the AND operation will be zero if that bit is &#x2018;0&#x2019;, and non-zero if that bit is &#x2018;1&#x2019;, and the Z flag will be set accordingly. Thus, since we are waiting for that bit to become &#x2018;0&#x2019; we use the &#x2018;JNZ&#x2019;, or &#x2018;jump if not zero&#x2019;, instruction to cause a jump to the label &#x2018;LOOP&#x2019; to occur when the Z flag is not set. Finally, when the conversion is finished, the &#x2018;AL&#x2019; register already contains the high byte of the result, so it is moved to the &#x2018;AH&#x2019; register, the port pointer &#x2018;DX&#x2019; is incremented to point to the next port, and the low byte of the result is read into &#x2018;AL&#x2019; &#x2013; the final converted valve is thus in &#x2018;AX&#x2019;</p>
<figure class="image" id="fig4.6">
<img src="../images/50-1.jpg" alt="images"/>
<figcaption>
<aside class="abc1" style="margin-top:-10em;" epub:type="sidebar">
Fig. 4.6 The code segment for reading an ADC showing the use of a conditional jump
</aside>
</figcaption>
</figure>
<aside class="abc" style="margin-top:-0.5em;" epub:type="sidebar">
<figure id="fig4.7" style="margin-left:1em;">
<img src="../images/50-2.jpg" alt="images"/>
<figcaption>Fig. 4.7 Code example to show programming a long conditional jump</figcaption>
</figure>
</aside>
<p class="baindent">In the 8086 series, as in many types of processor, short jumps can be made either forwards or backwards; short in the case of the 8086 means &#x00B1;127 bytes. Longer jumps can be made, but they can not be conditional, <i>i.e.</i> only the &#x2018;JMP&#x2019; command can be used. This may seem to be a considerable restriction, but in practice it will not be much of a problem: if you are only writing interface subroutines, then you will rarely write more than 100 bytes of code, but if you do need a long conditional jump, then just use a &#x2018;JMP&#x2019; command with a conditional jump around it (see <a href="#fig4.7">Fig. 4.7</a>).</p>
</section>
<section epub:type="chapter" id="ch4.6">
<h2 class="h2"><b>4.6 Example project</b></h2>
<p class="banoindent">It is difficult, in a primer as this, to give a complete example of an interface project. Nevertheless, we have already been introduced to the hardware side of the interface, it is now time to examine the software. The task that the program has been developed for is somewhat contrived and will mainly be used to show the techniques involved. The task is: on a given signal <i>i.e.</i> an external switch closing), a time delay is initiated, at the end of the delay a voltage is sampled, and that voltage is then output on a DAC. The whole system is thus a sort of sample-and-hold and is designed to use all parts of the interface. <a href="#fig4.8">Fig. 4.8</a> shows a flow chart of the system. The final code is programmed in QBASIC (the Microsoft version of BASIC that is bundled with DOS).</p>
<aside class="abc" style="margin-top:-2em;" epub:type="sidebar">
<p class="noindent2" style="margin-left:1em;">The programming of the Am9513 is too complex to describe in detail here. For more in-depth explanations, the data sheet and programming manual for the device should be studied.</p>
</aside>
<p class="baindent">The first part of the program is the initialisation. The ADC and DAC do not need any initialisation and the 8255 PIO needs only the control register setting, the Am9513 however needs extensive initialisation and is set-up so that one section generates 1kHz whilst another is set to be a count-down timer. This counter initialisation is not shown here.</p>
<p class="indent">The next section is code to wait for the &#x2018;start&#x2019; signal: this signal is a high-level voltage on bit 1 of port A of the PIO, and could be either a switch closing or an output from another device. The subroutine merely returns the value of the required bit, with the &#x2018;decision&#x2019; being taken in the main program. Once bit Al goes high, the program calls the routine to start the <a id="page_51" class="page">Page 51, Programming the hardware</a>delay timer. The delay end is not sensed at this point, as it is known that it is some time away, and so control is returned to the main program and a brief message is printed.</p>
<aside class="abc" style="margin-top:-4em;" epub:type="sidebar">
<figure id="fig4.8" style="margin-left:1em;">
<img src="../images/51-1.jpg" alt="images"/>
<figcaption>Fig 4.8 Flowchart of example project</figcaption>
</figure>
</aside>
<p class="baindent">Once the delay period has finished, the subroutine to perform the analogue to digital conversion is called. This routine first initiates a conversion, then waits for it to finish and finally reads the result and returns to the main program. Once the value has been passed back, it is used to set the output voltage using the next routine. Finally the value is printed out and the program loops back and waits for another event.</p>
<p class="baindent">This program is written purely in BASIC; however it need not be so, nor is it really necessary in such a short program to split things into subroutines and procedures. However the rationale behind splitting up the program in such a way is that if necessary, the sections that interact directly with the hardware can be written in machine code and directly replace the BASIC ones. If this was done, then one of the reasons for splitting the delay routines becomes apparent: in a multitasking system, when the processor is executing machine code subroutines that don&#x2019;t involve a system call, no other process is given time to execute. If the machine code subroutine often returns to the controlling program, then other programs get a chance to execute. A similar reasoning is behind making the decision on whether the PIO bit is set in the main program rather than in the subroutine: <i>i.e.</i> so that the processor isn&#x2019;t trapped in the subroutine until something happens externally.</p>
<figure class="banoindentt" id="fig4.9">
<img src="../images/51-2.jpg" alt="images"/>
<a id="page_52" class="page">Page 52, Programming the hardware</a>
<img src="../images/52-1.jpg" alt="images"/>
</figure>

</section>
</section>
</body>
</html>
